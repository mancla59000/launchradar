version: '3.8'

services:
  # Next.js Application - CAX11 Optimized
  web:
    build:
      context: ..
      dockerfile: Dockerfile.web
    container_name: launchradar-web
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_SUPABASE_URL=${NEXT_PUBLIC_SUPABASE_URL}
      - NEXT_PUBLIC_SUPABASE_ANON_KEY=${NEXT_PUBLIC_SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
    ports:
      - "3000:3000"
    volumes:
      - ../logs:/app/logs
    depends_on:
      - redis
    networks:
      - launchradar
    deploy:
      resources:
        limits:
          memory: 1.2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.3'

  # Background Data Collection Services - CAX11 Optimized
  twitter-collector:
    build:
      context: ..
      dockerfile: Dockerfile.collector
    container_name: launchradar-twitter
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - TWITTER_BEARER_TOKEN=${TWITTER_BEARER_TOKEN}
      - SUPABASE_URL=${NEXT_PUBLIC_SUPABASE_URL}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - WORKER_TYPE=twitter
      - COLLECTION_INTERVAL=7200 # 2 hours for CAX11 optimization
    volumes:
      - ../logs:/app/logs
    networks:
      - launchradar
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  reddit-collector:
    build:
      context: ..
      dockerfile: Dockerfile.collector
    container_name: launchradar-reddit
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - REDDIT_CLIENT_ID=${REDDIT_CLIENT_ID}
      - REDDIT_CLIENT_SECRET=${REDDIT_CLIENT_SECRET}
      - REDDIT_USERNAME=${REDDIT_USERNAME}
      - REDDIT_PASSWORD=${REDDIT_PASSWORD}
      - SUPABASE_URL=${NEXT_PUBLIC_SUPABASE_URL}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - WORKER_TYPE=reddit
      - COLLECTION_INTERVAL=10800 # 3 hours for CAX11 optimization
    volumes:
      - ../logs:/app/logs
    networks:
      - launchradar
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # Scoring Engine - CAX11 Optimized
  scoring-engine:
    build:
      context: ..
      dockerfile: Dockerfile.scoring
    container_name: launchradar-scoring
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - SUPABASE_URL=${NEXT_PUBLIC_SUPABASE_URL}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - PROCESSING_INTERVAL=3600 # 1 hour for CAX11 optimization
    volumes:
      - ../logs:/app/logs
    networks:
      - launchradar
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Redis for caching and session management - CAX11 Optimized
  redis:
    image: redis:7-alpine
    container_name: launchradar-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 96mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - launchradar
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.15'

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: launchradar-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ../logs/nginx:/var/log/nginx
    depends_on:
      - web
    networks:
      - launchradar

  # Uptime Monitoring with Kuma - CAX11 Optimized
  uptime-kuma:
    image: louislam/uptime-kuma:1
    container_name: launchradar-uptime
    restart: unless-stopped
    volumes:
      - uptime_data:/app/data
    ports:
      - "3001:3001"
    networks:
      - launchradar
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.15'

volumes:
  redis_data:
  uptime_data:

networks:
  launchradar:
    driver: bridge